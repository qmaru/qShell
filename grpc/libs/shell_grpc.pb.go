// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: shell.proto

package libs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShellServiceClient is the client API for ShellService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShellServiceClient interface {
	ServerCheck(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	ListScripts(ctx context.Context, in *ListState, opts ...grpc.CallOption) (*ListResults, error)
	RunScript(ctx context.Context, in *RunMeta, opts ...grpc.CallOption) (*RunResults, error)
	UploadFile(ctx context.Context, in *FileMeta, opts ...grpc.CallOption) (*FileResults, error)
}

type shellServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShellServiceClient(cc grpc.ClientConnInterface) ShellServiceClient {
	return &shellServiceClient{cc}
}

func (c *shellServiceClient) ServerCheck(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/pb.ShellService/ServerCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shellServiceClient) ListScripts(ctx context.Context, in *ListState, opts ...grpc.CallOption) (*ListResults, error) {
	out := new(ListResults)
	err := c.cc.Invoke(ctx, "/pb.ShellService/ListScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shellServiceClient) RunScript(ctx context.Context, in *RunMeta, opts ...grpc.CallOption) (*RunResults, error) {
	out := new(RunResults)
	err := c.cc.Invoke(ctx, "/pb.ShellService/RunScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shellServiceClient) UploadFile(ctx context.Context, in *FileMeta, opts ...grpc.CallOption) (*FileResults, error) {
	out := new(FileResults)
	err := c.cc.Invoke(ctx, "/pb.ShellService/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShellServiceServer is the server API for ShellService service.
// All implementations must embed UnimplementedShellServiceServer
// for forward compatibility
type ShellServiceServer interface {
	ServerCheck(context.Context, *Ping) (*Pong, error)
	ListScripts(context.Context, *ListState) (*ListResults, error)
	RunScript(context.Context, *RunMeta) (*RunResults, error)
	UploadFile(context.Context, *FileMeta) (*FileResults, error)
	mustEmbedUnimplementedShellServiceServer()
}

// UnimplementedShellServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShellServiceServer struct {
}

func (UnimplementedShellServiceServer) ServerCheck(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerCheck not implemented")
}
func (UnimplementedShellServiceServer) ListScripts(context.Context, *ListState) (*ListResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScripts not implemented")
}
func (UnimplementedShellServiceServer) RunScript(context.Context, *RunMeta) (*RunResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunScript not implemented")
}
func (UnimplementedShellServiceServer) UploadFile(context.Context, *FileMeta) (*FileResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedShellServiceServer) mustEmbedUnimplementedShellServiceServer() {}

// UnsafeShellServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShellServiceServer will
// result in compilation errors.
type UnsafeShellServiceServer interface {
	mustEmbedUnimplementedShellServiceServer()
}

func RegisterShellServiceServer(s grpc.ServiceRegistrar, srv ShellServiceServer) {
	s.RegisterService(&ShellService_ServiceDesc, srv)
}

func _ShellService_ServerCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellServiceServer).ServerCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShellService/ServerCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellServiceServer).ServerCheck(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShellService_ListScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellServiceServer).ListScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShellService/ListScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellServiceServer).ListScripts(ctx, req.(*ListState))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShellService_RunScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellServiceServer).RunScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShellService/RunScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellServiceServer).RunScript(ctx, req.(*RunMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShellService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShellService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellServiceServer).UploadFile(ctx, req.(*FileMeta))
	}
	return interceptor(ctx, in, info, handler)
}

// ShellService_ServiceDesc is the grpc.ServiceDesc for ShellService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShellService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ShellService",
	HandlerType: (*ShellServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerCheck",
			Handler:    _ShellService_ServerCheck_Handler,
		},
		{
			MethodName: "ListScripts",
			Handler:    _ShellService_ListScripts_Handler,
		},
		{
			MethodName: "RunScript",
			Handler:    _ShellService_RunScript_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _ShellService_UploadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shell.proto",
}
